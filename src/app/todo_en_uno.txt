import React, { useState, useEffect } from "react";

function validateEmail(email: string) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

function validateNumber(value: string) {
  return /^\d+$/.test(value);
}

interface Hijo {
  nombre: string;
  sexo: string;
  fechanacimiento: string;
}

interface ResultState {
  error?: string;
  message?: string;
  username?: string;
  password?: string;
  type?: 'success' | 'validation' | 'server' | 'network';
}

export default function AfiliadoForm({
  onClose,
  onSaved,
  initialData,
  isFullPage = false,
}: {
  onClose: () => void;
  onSaved: () => void;
  initialData?: any;
  isFullPage?: boolean;
}) {
  const [form, setForm] = useState({
    persona: {
      dni: "",
      nombre: "",
      apellido: "",
      fechanacimiento: "",
      telefono: "",
      email: "",
      sexo: "",
    },
    afiliado: {
      idafiliado: "",
      area: "",
      cargo: "",
      tipocontratacion: "",
      legajo: "",
      categoria: "",
      fechaafiliacion: "",
      fechamunicipio: "",
      lugartrabajo: "",
    },
    hijos: [] as Hijo[],
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [result, setResult] = useState<ResultState | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showValidationErrors, setShowValidationErrors] = useState(false);

  // Cargar datos iniciales si es ediciÃ³n
  useEffect(() => {
    if (initialData) {
      console.log('InitialData recibido en AfiliadoForm:', initialData);

      const formatDate = (dateString: string) => {
        if (!dateString) return "";
        const date = new Date(dateString);
        return date.toISOString().split('T')[0];
      };

      // Extraer datos de persona - puede venir anidado o directo
      const personaData = initialData.persona || {
        dni: initialData.dni,
        nombre: initialData.nombre,
        apellido: initialData.apellido,
        fechanacimiento: initialData.fechanacimiento,
        telefono: initialData.telefono,
        email: initialData.email,
        sexo: initialData.sexo
      };

      // Extraer datos de afiliado - puede venir anidado o directo
      const afiliadoData = initialData.afiliado || {
        idafiliado: initialData.idafiliado,
        area: initialData.area,
        cargo: initialData.cargo,
        tipocontratacion: initialData.tipocontratacion,
        legajo: initialData.legajo,
        categoria: initialData.categoria,
        fechaafiliacion: initialData.fechaafiliacion,
        fechamunicipio: initialData.fechamunicipio,
        lugartrabajo: initialData.lugartrabajo
      };

      const formData = {
        persona: {
          dni: personaData.dni?.toString() || "",
          nombre: personaData.nombre || "",
          apellido: personaData.apellido || "",
          fechanacimiento: formatDate(personaData.fechanacimiento) || "",
          telefono: personaData.telefono?.toString() || "",
          email: personaData.email || "",
          sexo: personaData.sexo || "",
        },
        afiliado: {
          idafiliado: afiliadoData.idafiliado?.toString() || "",
          area: afiliadoData.area || "",
          cargo: afiliadoData.cargo || "",
          tipocontratacion: afiliadoData.tipocontratacion || "",
          legajo: afiliadoData.legajo?.toString() || "",
          categoria: afiliadoData.categoria?.toString() || "",
          fechaafiliacion: formatDate(afiliadoData.fechaafiliacion) || "",
          fechamunicipio: formatDate(afiliadoData.fechamunicipio) || "",
          lugartrabajo: afiliadoData.lugartrabajo || "",
        },
        hijos: (initialData.hijos || []).map((hijo: any) => ({
          nombre: hijo.nombre || "",
          sexo: hijo.sexo || "",
          fechanacimiento: formatDate(hijo.fechanacimiento) || "",
        })),
      };

      console.log('Datos del formulario despuÃ©s de procesar:', formData);
      setForm(formData);
    }
  }, [initialData]);

  // ValidaciÃ³n mejorada
  const validate = (): boolean => {
    const newErrors: Record<string, string> = {};

    // Persona
    if (!form.persona.dni.trim()) {
      newErrors.dni = "El DNI es obligatorio";
    } else if (!validateNumber(form.persona.dni)) {
      newErrors.dni = "El DNI solo debe contener nÃºmeros";
    }

    if (!form.persona.nombre.trim()) {
      newErrors.nombre = "El nombre es obligatorio";
    }

    if (!form.persona.apellido.trim()) {
      newErrors.apellido = "El apellido es obligatorio";
    }

    if (!form.persona.fechanacimiento) {
      newErrors.fechanacimiento = "La fecha de nacimiento es obligatoria";
    }

    if (!form.persona.telefono.trim()) {
      newErrors.telefono = "El telÃ©fono es obligatorio";
    } else if (!validateNumber(form.persona.telefono)) {
      newErrors.telefono = "El telÃ©fono solo debe contener nÃºmeros";
    }

    if (!form.persona.email.trim()) {
      newErrors.email = "El email es obligatorio";
    } else if (!validateEmail(form.persona.email)) {
      newErrors.email = "El formato del email no es vÃ¡lido";
    }

    if (!form.persona.sexo) {
      newErrors.sexo = "Debe seleccionar un sexo";
    }

    // Afiliado
    if (!form.afiliado.idafiliado.trim()) {
      newErrors.idafiliado = "El ID de afiliado es obligatorio";
    }

    if (!form.afiliado.area.trim()) {
      newErrors.area = "El Ã¡rea es obligatoria";
    }

    if (!form.afiliado.cargo.trim()) {
      newErrors.cargo = "El cargo es obligatorio";
    }

    if (!form.afiliado.tipocontratacion) {
      newErrors.tipocontratacion = "Debe seleccionar un tipo de contrataciÃ³n";
    }

    if (!form.afiliado.legajo.trim()) {
      newErrors.legajo = "El legajo es obligatorio";
    }

    if (!form.afiliado.categoria.trim()) {
      newErrors.categoria = "La categorÃ­a es obligatoria";
    }

    if (!form.afiliado.fechaafiliacion) {
      newErrors.fechaafiliacion = "La fecha de afiliaciÃ³n es obligatoria";
    }

    if (!form.afiliado.fechamunicipio) {
      newErrors.fechamunicipio = "La fecha de municipio es obligatoria";
    }

    if (!form.afiliado.lugartrabajo.trim()) {
      newErrors.lugartrabajo = "El lugar de trabajo es obligatorio";
    }

    // Validar hijos
    form.hijos.forEach((hijo: Hijo, idx: number) => {
      if (!hijo.nombre.trim()) {
        newErrors[`hijo_nombre_${idx}`] = "El nombre del hijo es obligatorio";
      }
      if (!hijo.sexo) {
        newErrors[`hijo_sexo_${idx}`] = "Debe seleccionar el sexo del hijo";
      }
      if (!hijo.fechanacimiento) {
        newErrors[`hijo_fechanacimiento_${idx}`] = "La fecha de nacimiento del hijo es obligatoria";
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Ejecutar validaciÃ³n cuando cambian los campos (solo si ya se intentÃ³ enviar)
  useEffect(() => {
    if (showValidationErrors) {
      validate();
    }
  }, [form, showValidationErrors]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isSubmitting) return;

    // Activar la visualizaciÃ³n de errores
    setShowValidationErrors(true);

    // FORZAR validaciÃ³n antes de enviar
    const isValid = validate();
    
    if (!isValid) {
      // Limpiar resultado anterior y mostrar error de validaciÃ³n
      setResult({
        error: "Por favor, completa todos los campos obligatorios marcados con *",
        type: "validation"
      });
      
      // Contar errores
      const errorCount = Object.keys(errors).length;
      console.log(`Se encontraron ${errorCount} errores de validaciÃ³n`);
      
      // Hacer scroll al primer error
      setTimeout(() => {
        const firstErrorElement = document.querySelector('.border-red-500');
        if (firstErrorElement) {
          firstErrorElement.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
          });
        }
      }, 100);
      
      return;
    }

    // Limpiar errores de validaciÃ³n si todo estÃ¡ bien
    setResult(null);
    setIsSubmitting(true);

    try {
      const method = initialData ? "PUT" : "POST";
      const url = initialData
        ? `/api/afiliados/${form.afiliado.idafiliado}`
        : "/api/afiliados";
      
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
      
      const data = await res.json();
      
      if (!res.ok) {
        setResult({
          error: `Error del servidor: ${data.error || "Error desconocido"}`,
          type: "server"
        });
        return;
      }
      
      setResult({
        message: data.message,
        username: data.username,
        password: data.password,
        type: "success"
      });
      
      // Esperar un momento para mostrar el resultado antes de cerrar
      setTimeout(() => {
        onSaved();
        onClose();
      }, 2000);
      
    } catch (error) {
      console.error("Error al guardar:", error);
      setResult({
        error: "Error de conexiÃ³n. Verifica tu conexiÃ³n a internet e intenta nuevamente.",
        type: "network"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const addHijo = () => {
    setForm({
      ...form,
      hijos: [...form.hijos, { nombre: "", sexo: "", fechanacimiento: "" }],
    });
  };

  const removeHijo = (index: number) => {
    const newHijos = form.hijos.filter((_, i) => i !== index);
    setForm({ ...form, hijos: newHijos });
  };

  const handleChange = (section: string, field: string, value: string) => {
    setForm({
      ...form,
      [section]: { ...form[section as keyof typeof form], [field]: value },
    });
  };

  return (
    <div className="w-full max-w-4xl mx-auto max-h-[90vh] overflow-hidden flex flex-col bg-white rounded-xl">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-6 rounded-t-xl flex-shrink-0">
        <h1 className="text-2xl font-bold">
          {initialData ? "âœï¸ Modificar Afiliado" : "âž• Registrar Nuevo Afiliado"}
        </h1>
        <p className="text-blue-100 mt-2">
          {initialData 
            ? `Editando: ${initialData.persona?.nombre} ${initialData.persona?.apellido}` 
            : "Complete todos los campos obligatorios para registrar un nuevo afiliado"
          }
        </p>
      </div>

      {/* Content - Scrollable */}
      <div className="flex-1 overflow-y-auto p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Persona */}
          <div className="bg-gradient-to-r from-slate-50 to-slate-100 p-6 rounded-lg border border-slate-200">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
              <h2 className="text-xl font-bold text-slate-800">InformaciÃ³n Personal</h2>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  DNI *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all ${
                    errors.dni ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-blue-400"
                  }`}
                  placeholder="Ej: 12345678"
                  value={form.persona.dni}
                  onChange={(e) =>
                    handleChange("persona", "dni", e.target.value.replace(/\D/g, ""))
                  }
                />
                {errors.dni && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.dni}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Nombre *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all ${
                    errors.nombre ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-blue-400"
                  }`}
                  placeholder="Ej: Juan"
                  value={form.persona.nombre}
                  onChange={(e) =>
                    handleChange("persona", "nombre", e.target.value)
                  }
                />
                {errors.nombre && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.nombre}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Apellido *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all ${
                    errors.apellido ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-blue-400"
                  }`}
                  placeholder="Ej: PÃ©rez"
                  value={form.persona.apellido}
                  onChange={(e) =>
                    handleChange("persona", "apellido", e.target.value)
                  }
                />
                {errors.apellido && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.apellido}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Fecha de nacimiento *
                </label>
                <input
                  type="date"
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all ${
                    errors.fechanacimiento ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-blue-400"
                  }`}
                  value={form.persona.fechanacimiento}
                  onChange={(e) =>
                    handleChange("persona", "fechanacimiento", e.target.value)
                  }
                />
                {errors.fechanacimiento && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.fechanacimiento}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  TelÃ©fono *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all ${
                    errors.telefono ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-blue-400"
                  }`}
                  placeholder="Ej: 2991234567"
                  value={form.persona.telefono}
                  onChange={(e) =>
                    handleChange("persona", "telefono", e.target.value.replace(/\D/g, ""))
                  }
                />
                {errors.telefono && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.telefono}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Email *
                </label>
                <input
                  type="email"
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all ${
                    errors.email ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-blue-400"
                  }`}
                  placeholder="Ej: correo@mail.com"
                  value={form.persona.email}
                  onChange={(e) =>
                    handleChange("persona", "email", e.target.value)
                  }
                />
                {errors.email && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.email}
                  </p>
                )}
              </div>

              <div className="md:col-span-2 lg:col-span-1">
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Sexo *
                </label>
                <select
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all ${
                    errors.sexo ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-blue-400"
                  }`}
                  value={form.persona.sexo}
                  onChange={(e) =>
                    handleChange("persona", "sexo", e.target.value)
                  }
                >
                  <option value="">Seleccionar sexo</option>
                  <option value="Masculino">Masculino</option>
                  <option value="Femenino">Femenino</option>
                  <option value="Otro">Otro</option>
                </select>
                {errors.sexo && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.sexo}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Afiliado */}
          <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-lg border border-green-200">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              </div>
              <h2 className="text-xl font-bold text-slate-800">InformaciÃ³n Laboral</h2>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  ID Afiliado *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.idafiliado ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  placeholder="ID Ãºnico del afiliado"
                  value={form.afiliado.idafiliado}
                  onChange={(e) =>
                    handleChange("afiliado", "idafiliado", e.target.value)
                  }
                />
                {errors.idafiliado && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.idafiliado}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Ãrea *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.area ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  placeholder="Ej: AdministraciÃ³n"
                  value={form.afiliado.area}
                  onChange={(e) =>
                    handleChange("afiliado", "area", e.target.value)
                  }
                />
                {errors.area && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.area}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Cargo *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.cargo ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  placeholder="Ej: Secretario"
                  value={form.afiliado.cargo}
                  onChange={(e) =>
                    handleChange("afiliado", "cargo", e.target.value)
                  }
                />
                {errors.cargo && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.cargo}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Tipo de contrataciÃ³n *
                </label>
                <select
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.tipocontratacion ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  value={form.afiliado.tipocontratacion}
                  onChange={(e) =>
                    handleChange("afiliado", "tipocontratacion", e.target.value)
                  }
                >
                  <option value="">Seleccionar tipo</option>
                  <option value="Planta Permanente">Planta Permanente</option>
                  <option value="Contratado">Contratado</option>
                  <option value="Transitorio">Transitorio</option>
                </select>
                {errors.tipocontratacion && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.tipocontratacion}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Legajo *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.legajo ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  placeholder="NÃºmero de legajo"
                  value={form.afiliado.legajo}
                  onChange={(e) =>
                    handleChange("afiliado", "legajo", e.target.value)
                  }
                />
                {errors.legajo && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.legajo}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  CategorÃ­a *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.categoria ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  placeholder="CategorÃ­a laboral"
                  value={form.afiliado.categoria}
                  onChange={(e) =>
                    handleChange("afiliado", "categoria", e.target.value)
                  }
                />
                {errors.categoria && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.categoria}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Fecha de afiliaciÃ³n *
                </label>
                <input
                  type="date"
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.fechaafiliacion ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  value={form.afiliado.fechaafiliacion}
                  onChange={(e) =>
                    handleChange("afiliado", "fechaafiliacion", e.target.value)
                  }
                />
                {errors.fechaafiliacion && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.fechaafiliacion}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Fecha municipio *
                </label>
                <input
                  type="date"
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.fechamunicipio ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  value={form.afiliado.fechamunicipio}
                  onChange={(e) =>
                    handleChange("afiliado", "fechamunicipio", e.target.value)
                  }
                />
                {errors.fechamunicipio && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.fechamunicipio}
                  </p>
                )}
              </div>

              <div className="md:col-span-2 lg:col-span-3">
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Lugar de trabajo *
                </label>
                <input
                  className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all ${
                    errors.lugartrabajo ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-green-400"
                  }`}
                  placeholder="DirecciÃ³n del lugar de trabajo"
                  value={form.afiliado.lugartrabajo}
                  onChange={(e) =>
                    handleChange("afiliado", "lugartrabajo", e.target.value)
                  }
                />
                {errors.lugartrabajo && (
                  <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                    <span className="text-red-400">âš </span> {errors.lugartrabajo}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Hijos */}
          <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-6 rounded-lg border border-purple-200">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                  <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                </div>
                <h2 className="text-xl font-bold text-slate-800">
                  Hijos ({form.hijos.length})
                </h2>
              </div>
              <button
                type="button"
                onClick={addHijo}
                className="flex items-center gap-2 bg-gradient-to-r from-purple-600 to-purple-700 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all duration-200 hover:scale-105 font-medium"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
                Agregar hijo
              </button>
            </div>
            
            {form.hijos.length === 0 ? (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-purple-200 rounded-full mx-auto mb-4 flex items-center justify-center">
                  <svg className="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                </div>
                <p className="text-slate-500 text-lg">No hay hijos agregados</p>
                <p className="text-slate-400 text-sm mt-1">Presiona "Agregar hijo" para incluir informaciÃ³n de hijos</p>
              </div>
            ) : (
              <div className="space-y-4">
                {form.hijos.map((hijo: Hijo, idx: number) => (
                  <div
                    key={idx}
                    className="bg-white rounded-lg p-5 border border-purple-200 shadow-sm"
                  >
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-slate-800">
                        Hijo #{idx + 1}
                      </h3>
                      <button
                        type="button"
                        onClick={() => removeHijo(idx)}
                        className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-colors"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                      </button>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-slate-700 mb-2">
                          Nombre del hijo *
                        </label>
                        <input
                          className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-purple-400 transition-all ${
                            errors[`hijo_nombre_${idx}`] ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-purple-400"
                          }`}
                          placeholder="Nombre completo"
                          value={hijo.nombre}
                          onChange={(e) => {
                            const hijos = [...form.hijos];
                            hijos[idx].nombre = e.target.value;
                            setForm({ ...form, hijos });
                          }}
                        />
                        {errors[`hijo_nombre_${idx}`] && (
                          <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                            <span className="text-red-400">âš </span> {errors[`hijo_nombre_${idx}`]}
                          </p>
                        )}
                      </div>
                      
                      <div>
                        <label className="block text-sm font-semibold text-slate-700 mb-2">
                          Sexo *
                        </label>
                        <select
                          className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-purple-400 transition-all ${
                            errors[`hijo_sexo_${idx}`] ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-purple-400"
                          }`}
                          value={hijo.sexo}
                          onChange={(e) => {
                            const hijos = [...form.hijos];
                            hijos[idx].sexo = e.target.value;
                            setForm({ ...form, hijos });
                          }}
                        >
                          <option value="">Seleccionar</option>
                          <option value="M">Masculino</option>
                          <option value="F">Femenino</option>
                          <option value="Otro">Otro</option>
                        </select>
                        {errors[`hijo_sexo_${idx}`] && (
                          <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                            <span className="text-red-400">âš </span> {errors[`hijo_sexo_${idx}`]}
                          </p>
                        )}
                      </div>
                      
                      <div>
                        <label className="block text-sm font-semibold text-slate-700 mb-2">
                          Fecha de nacimiento *
                        </label>
                        <input
                          type="date"
                          className={`w-full border rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-purple-400 transition-all ${
                            errors[`hijo_fechanacimiento_${idx}`] ? "border-red-500 bg-red-50" : "border-slate-300 focus:border-purple-400"
                          }`}
                          value={hijo.fechanacimiento}
                          onChange={(e) => {
                            const hijos = [...form.hijos];
                            hijos[idx].fechanacimiento = e.target.value;
                            setForm({ ...form, hijos });
                          }}
                        />
                        {errors[`hijo_fechanacimiento_${idx}`] && (
                          <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                            <span className="text-red-400">âš </span> {errors[`hijo_fechanacimiento_${idx}`]}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Resultado y Errores */}
          {result && (
            <div className={`rounded-lg p-6 border-2 ${
              result.type === 'success' 
                ? 'bg-gradient-to-r from-green-100 to-emerald-100 border-green-300' 
                : 'bg-gradient-to-r from-red-100 to-pink-100 border-red-300'
            }`}>
              {result.type === 'success' ? (
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-bold text-green-800">
                    {result.message}
                  </h3>
                </div>
              ) : (
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-bold text-red-800">
                    {result.error}
                  </h3>
                </div>
              )}
              
              {result.type === 'validation' && Object.keys(errors).length > 0 && (
                <div className="mt-4 p-4 bg-white rounded-lg border border-red-200">
                  <h4 className="font-semibold text-red-800 mb-2">
                    Campos que requieren atenciÃ³n ({Object.keys(errors).length}):
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                    {Object.entries(errors).map(([field, message]: [string, string]) => (
                      <div key={field} className="flex items-center gap-2 text-red-700">
                        <svg className="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>{message}</span>
                      </div>
                    ))}
                  </div>
                  </div>
                
              )}
              
              {result.username && result.password && (
                <div className="mt-4 bg-white rounded-lg p-4 border border-green-200">
                  <h4 className="font-semibold text-green-800 mb-2">Credenciales de acceso:</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium text-green-700">Usuario:</label>
                      <p className="text-green-900 font-mono bg-green-50 p-2 rounded border">{result.username}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-green-700">ContraseÃ±a:</label>
                      <p className="text-green-900 font-mono bg-green-50 p-2 rounded border">{result.password}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
        </form>
      </div>

      {/* Footer - Fixed */}
      <div className="flex-shrink-0 bg-slate-50 border-t border-slate-200 p-6 rounded-b-xl">
        <div className="flex gap-4">
          <button
            type="button"
            className="flex-1 bg-slate-200 text-slate-700 font-semibold py-3 px-6 rounded-lg shadow hover:bg-slate-300 transition-all duration-200 hover:shadow-md"
            onClick={onClose}
            disabled={isSubmitting}
          >
            Cancelar
          </button>
          <button
            onClick={handleSubmit}
            disabled={isSubmitting}
            className={`flex-1 font-semibold py-3 px-6 rounded-lg shadow transition-all duration-200 flex items-center justify-center gap-2 ${
              !isSubmitting
                ? "bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:shadow-lg hover:scale-[1.02]"
                : "bg-slate-400 text-slate-600 cursor-not-allowed"
            }`}
          >
            {isSubmitting ? (
              <>
                <svg className="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Guardando...
              </>
            ) : (
              <>
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                {initialData ? "Guardar Cambios" : "Registrar Afiliado"}
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}
import React, { useState } from "react";

export default function AfiliadoList({
  afiliados,
  onEdit,
  onDelete,
  onView,
  getAfiliadoActivo, // Nueva prop para manejar el estado correctamente
}: {
  afiliados: any[];
  onEdit: (afiliado: any) => void;
  onDelete: (id: string) => void;
  onView: (id: string) => void;
  getAfiliadoActivo: (afiliado: any) => boolean;
}) {
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("todos");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Filtros corregidos
  const filteredAfiliados = afiliados.filter((afiliado) => {
    const matchesSearch = 
      afiliado.persona?.dni?.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||
      afiliado.persona?.nombre?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      afiliado.persona?.apellido?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      afiliado.persona?.email?.toLowerCase().includes(searchTerm.toLowerCase());

    const isActive = getAfiliadoActivo(afiliado);
    const matchesStatus = 
      filterStatus === "todos" ||
      (filterStatus === "activos" && isActive) ||
      (filterStatus === "inactivos" && !isActive);

    return matchesSearch && matchesStatus;
  });

  // PaginaciÃ³n
  const totalPages = Math.ceil(filteredAfiliados.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedAfiliados = filteredAfiliados.slice(startIndex, startIndex + itemsPerPage);

  const formatDate = (dateString: string) => {
    if (!dateString) return "N/A";
    return new Date(dateString).toLocaleDateString("es-ES");
  };

  const handleDelete = (afiliado: any) => {
    if (window.confirm(`Â¿EstÃ¡s seguro de que deseas eliminar a ${afiliado.persona?.nombre} ${afiliado.persona?.apellido}?`)) {
      onDelete(afiliado.idafiliado || afiliado.afiliado?.idafiliado);
    }
  };

  return (
    <div className="space-y-6">
      {/* Controles de filtro y bÃºsqueda */}
      <div className="bg-white p-6 rounded-lg border border-slate-200">
        <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
          <div className="flex-1 max-w-md">
            <div className="relative">
              <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <input
                type="text"
                placeholder="Buscar por DNI, nombre, apellido o email..."
                className="w-full pl-10 pr-4 py-3 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400"
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setCurrentPage(1);
                }}
              />
            </div>
          </div>

          <div className="flex gap-3">
            <select
              className="border border-slate-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white min-w-[140px]"
              value={filterStatus}
              onChange={(e) => {
                setFilterStatus(e.target.value);
                setCurrentPage(1);
              }}
            >
              <option value="todos">Todos</option>
              <option value="activos">Activos</option>
              <option value="inactivos">Inactivos</option>
            </select>

            <div className="text-sm text-slate-500 flex items-center px-3">
              {filteredAfiliados.length} de {afiliados.length} afiliados
            </div>
          </div>
        </div>

        {/* Debug info - Remover en producciÃ³n */}
        <div className="mt-4 p-3 bg-gray-50 rounded text-xs text-gray-600">
          <strong>Debug:</strong> 
          Total: {afiliados.length}, 
          Activos: {afiliados.filter(a => getAfiliadoActivo(a)).length}, 
          Filtrados: {filteredAfiliados.length}
        </div>
      </div>

      {/* Tabla */}
      <div className="bg-white rounded-lg border border-slate-200 overflow-hidden">
        {paginatedAfiliados.length === 0 ? (
          <div className="text-center py-12">
            <div className="w-24 h-24 bg-slate-100 rounded-full mx-auto mb-6 flex items-center justify-center">
              <svg className="w-12 h-12 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
              </svg>
            </div>
            <h3 className="text-xl font-semibold text-slate-600 mb-2">No se encontraron afiliados</h3>
            <p className="text-slate-500">
              {searchTerm || filterStatus !== "todos" 
                ? "Intenta ajustar tus filtros de bÃºsqueda" 
                : "AÃºn no hay afiliados registrados en el sistema"}
            </p>
          </div>
        ) : (
          <>
            {/* Header de la tabla */}
            <div className="bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200">
              <div className="grid grid-cols-12 gap-4 p-4 font-semibold text-slate-700 text-sm">
                <div className="col-span-2">DNI</div>
                <div className="col-span-2">Nombre</div>
                <div className="col-span-2">Apellido</div>
                <div className="col-span-2">Email</div>
                <div className="col-span-2">Estado</div>
                <div className="col-span-2 text-center">Acciones</div>
              </div>
            </div>

            {/* Filas de la tabla */}
            <div className="divide-y divide-slate-100">
              {paginatedAfiliados.map((afiliado, index) => {
                const isActive = getAfiliadoActivo(afiliado);
                
                return (
                  <div
                    key={afiliado.idafiliado || afiliado.afiliado?.idafiliado || index}
                    className="grid grid-cols-12 gap-4 p-4 hover:bg-slate-50 transition-colors duration-150"
                  >
                    <div className="col-span-2 font-medium text-slate-900">
                      {afiliado.persona?.dni || "N/A"}
                    </div>
                    <div className="col-span-2 text-slate-800">
                      {afiliado.persona?.nombre || "N/A"}
                    </div>
                    <div className="col-span-2 text-slate-800">
                      {afiliado.persona?.apellido || "N/A"}
                    </div>
                    <div className="col-span-2 text-slate-600 text-sm truncate" title={afiliado.persona?.email}>
                      {afiliado.persona?.email || "Sin email"}
                    </div>
                    <div className="col-span-2">
                      <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${
                        isActive
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {isActive ? (
                          <>
                            <div className="w-1.5 h-1.5 bg-green-400 rounded-full mr-1.5"></div>
                            Activo
                          </>
                        ) : (
                          <>
                            <div className="w-1.5 h-1.5 bg-red-400 rounded-full mr-1.5"></div>
                            Inactivo
                          </>
                        )}
                      </span>
                    </div>
                    <div className="col-span-2 flex justify-center gap-2">
                      <button
                        className="flex items-center gap-1 bg-blue-50 hover:bg-blue-100 text-blue-700 px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200 hover:shadow-md"
                        onClick={() => onView(afiliado.idafiliado || afiliado.afiliado?.idafiliado)}
                        title="Ver detalles"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                        Ver
                      </button>
                      <button
                        className="flex items-center gap-1 bg-amber-50 hover:bg-amber-100 text-amber-700 px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200 hover:shadow-md"
                        onClick={() => onEdit(afiliado)}
                        title="Editar afiliado"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        Editar
                      </button>
                      <button
                        className="flex items-center gap-1 bg-red-50 hover:bg-red-100 text-red-700 px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200 hover:shadow-md"
                        onClick={() => handleDelete(afiliado)}
                        title="Eliminar afiliado"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Eliminar
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </>
        )}
      </div>

      {/* PaginaciÃ³n */}
      {totalPages > 1 && (
        <div className="bg-white border border-slate-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div className="text-sm text-slate-600">
              Mostrando {startIndex + 1} a {Math.min(startIndex + itemsPerPage, filteredAfiliados.length)} de {filteredAfiliados.length} resultados
            </div>
            
            <div className="flex items-center gap-2">
              <button
                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                disabled={currentPage === 1}
                className={`p-2 rounded-lg border transition-colors ${
                  currentPage === 1
                    ? 'border-slate-200 text-slate-400 cursor-not-allowed'
                    : 'border-slate-300 text-slate-600 hover:bg-slate-50'
                }`}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>

              <div className="flex gap-1">
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  let pageNum;
                  if (totalPages <= 5) {
                    pageNum = i + 1;
                  } else if (currentPage <= 3) {
                    pageNum = i + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageNum = totalPages - 4 + i;
                  } else {
                    pageNum = currentPage - 2 + i;
                  }

                  return (
                    <button
                      key={pageNum}
                      onClick={() => setCurrentPage(pageNum)}
                      className={`w-10 h-10 rounded-lg border text-sm font-medium transition-colors ${
                        currentPage === pageNum
                          ? 'border-blue-500 bg-blue-500 text-white'
                          : 'border-slate-300 text-slate-600 hover:bg-slate-50'
                      }`}
                    >
                      {pageNum}
                    </button>
                  );
                })}
              </div>

              <button
                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                disabled={currentPage === totalPages}
                className={`p-2 rounded-lg border transition-colors ${
                  currentPage === totalPages
                    ? 'border-slate-200 text-slate-400 cursor-not-allowed'
                    : 'border-slate-300 text-slate-600 hover:bg-slate-50'
                }`}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
// EditAfiliadoPage.tsx - VersiÃ³n corregida
"use client";

import React, { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";
import AfiliadoForm from "./AfiliadoForm";

interface Persona {
  dni: string;
  nombre: string;
  apellido: string;
  fechanacimiento: string;
  telefono: string;
  email: string;
  sexo: string;
}

interface Afiliado {
  idafiliado: string;
  area: string;
  cargo: string;
  tipocontratacion: string;
  legajo: number;
  categoria: number;
  fechaafiliacion: string;
  fechamunicipio: string;
  lugartrabajo: string;
  activo?: boolean;
}

interface AfiliadoCompleto {
  persona: Persona;
  afiliado: Afiliado;
  hijos?: any[];
  activo?: boolean;
}

export default function EditAfiliadoPage() {
  const router = useRouter();
  const params = useParams();
  const afiliadoId = params?.id;
  
  const [afiliado, setAfiliado] = useState<AfiliadoCompleto | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadAfiliado = async () => {
      try {
        let afiliadoData = null;

        // Primero intentar cargar desde localStorage
        const storedAfiliado = localStorage.getItem('editingAfiliado');
        if (storedAfiliado) {
          const parsedAfiliado = JSON.parse(storedAfiliado);
          
          // Normalizar la estructura de datos desde localStorage
          afiliadoData = normalizeAfiliadoData(parsedAfiliado);
          localStorage.removeItem('editingAfiliado');
        }

        // Si no hay datos en localStorage, cargar desde la API
        if (!afiliadoData && afiliadoId) {
          const response = await fetch(`/api/afiliados/${afiliadoId}`);
          if (!response.ok) {
            throw new Error('Error al cargar el afiliado');
          }
          const data = await response.json();
          afiliadoData = normalizeAfiliadoData(data);
        }

        if (!afiliadoData) {
          throw new Error('No se pudieron cargar los datos del afiliado');
        }

        console.log('Datos cargados para ediciÃ³n:', afiliadoData); // Debug
        setAfiliado(afiliadoData);
        
      } catch (err) {
        console.error('Error cargando afiliado:', err);
        setError(err instanceof Error ? err.message : 'Error desconocido');
      } finally {
        setLoading(false);
      }
    };

    loadAfiliado();
  }, [afiliadoId]);

  // FunciÃ³n para normalizar los datos independientemente de su estructura origen
  const normalizeAfiliadoData = (data: any): AfiliadoCompleto => {
    console.log('Datos recibidos para normalizar:', data); // Debug
    
    // Determinar si los datos vienen de la lista (estructura anidada) o de la API directa
    const persona = data.persona || {
      dni: data.dni,
      nombre: data.nombre,
      apellido: data.apellido,
      fechanacimiento: data.fechanacimiento,
      telefono: data.telefono,
      email: data.email,
      sexo: data.sexo
    };

    const afiliado = data.afiliado || {
      idafiliado: data.idafiliado,
      area: data.area,
      cargo: data.cargo,
      tipocontratacion: data.tipocontratacion,
      legajo: data.legajo,
      categoria: data.categoria,
      fechaafiliacion: data.fechaafiliacion,
      fechamunicipio: data.fechamunicipio,
      lugartrabajo: data.lugartrabajo,
      activo: data.activo
    };

    const normalized = {
      persona,
      afiliado,
      hijos: data.hijos || [],
      activo: data.activo ?? afiliado.activo ?? true
    };

    console.log('Datos normalizados:', normalized); // Debug
    return normalized;
  };

  const handleSaved = () => {
    router.push('/afiliados');
  };

  const handleCancel = () => {
    router.back();
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg border border-slate-200 p-8">
          <div className="flex items-center gap-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span className="text-slate-700 font-medium">Cargando datos del afiliado...</span>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg border border-red-200 p-8 max-w-md">
          <div className="text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full mx-auto mb-4 flex items-center justify-center">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h2 className="text-xl font-bold text-red-600 mb-2">Error al cargar</h2>
            <p className="text-slate-600 mb-6">{error}</p>
            <div className="flex gap-3 justify-center">
              <button
                onClick={() => router.back()}
                className="px-6 py-2 bg-slate-200 text-slate-800 rounded-lg hover:bg-slate-300 transition-colors font-medium"
              >
                Regresar
              </button>
              <button
                onClick={() => window.location.reload()}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                Reintentar
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="max-w-5xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg border border-slate-200 p-6 mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={handleCancel}
                className="p-2 hover:bg-slate-100 rounded-lg transition-colors"
                title="Regresar"
              >
                <svg className="w-6 h-6 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <div>
                <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">
                  Editar Afiliado
                </h1>
                <p className="text-slate-600 mt-1">
                  {afiliado?.persona?.nombre} {afiliado?.persona?.apellido} - DNI: {afiliado?.persona?.dni}
                </p>
              </div>
            </div>
            
            {/* Estado del afiliado */}
            <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
              (afiliado?.activo ?? afiliado?.afiliado?.activo ?? true)
                ? 'bg-green-100 text-green-800' 
                : 'bg-red-100 text-red-800'
            }`}>
              {(afiliado?.activo ?? afiliado?.afiliado?.activo ?? true) ? 'âœ“ Activo' : 'âœ— Inactivo'}
            </div>
          </div>
        </div>

        {/* Formulario */}
        <div className="bg-white rounded-xl shadow-lg border border-slate-200 overflow-hidden">
          <AfiliadoForm
            onClose={handleCancel}
            onSaved={handleSaved}
            initialData={afiliado}
            isFullPage={true}
          />
        </div>
      </div>
    </div>
  );
}
import React, { useEffect } from "react";

export default function Modal({ 
  children, 
  onClose, 
  maxWidth = "max-w-4xl" 
}: { 
  children: React.ReactNode; 
  onClose: () => void;
  maxWidth?: string;
}) {
  // Cerrar modal con ESC
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.body.style.overflow = 'hidden'; // Prevenir scroll del body

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.body.style.overflow = 'unset';
    };
  }, [onClose]);

  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      onClick={handleBackdropClick}
    >
      <div 
        className={`bg-white rounded-xl shadow-2xl relative w-full ${maxWidth} transform transition-all duration-200 scale-100 opacity-100`}
        onClick={(e) => e.stopPropagation()}
      >
        {/* BotÃ³n de cerrar */}
        <button 
          className="absolute top-4 right-4 z-10 w-10 h-10 bg-white rounded-full shadow-lg border border-slate-200 flex items-center justify-center text-slate-500 hover:text-red-500 hover:bg-red-50 transition-colors duration-200"
          onClick={onClose}
          title="Cerrar (ESC)"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        
        {children}
      </div>
    </div>
  );
}
"use client";

import React, { useState, useEffect } from "react";
import AfiliadoList from "./AfiliadoList";
import AfiliadoForm from "./AfiliadoForm";
import Modal from "./Modal";

export default function AfiliadosPage() {
  const [afiliados, setAfiliados] = useState<any[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [editAfiliado, setEditAfiliado] = useState<any>(null);
  const [viewAfiliado, setViewAfiliado] = useState<any>(null);


  // Editar
  const handleEdit = (afiliado: any) => {
    setEditAfiliado(afiliado);
    setShowModal(true);
  };


  // Cargar afiliados
  const fetchAfiliados = async () => {
    const res = await fetch("/api/afiliados");
    const data = await res.json();
    setAfiliados(data);
  };

  useEffect(() => {
    fetchAfiliados();
  }, []);

  // Eliminar (desactivar)
  const handleDelete = async (id: string) => {
    await fetch(`/api/afiliados/${id}`, { method: "DELETE" });
    fetchAfiliados();
  };


  // Agregar
  const handleAdd = () => {
    setEditAfiliado(null);
    setShowModal(true);
  };

  // Ver afiliado completo
  const handleView = async (id: string) => {
    const res = await fetch(`/api/afiliados/${id}`);
    const data = await res.json();
    setViewAfiliado(data);
    setShowModal(true);
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return "N/A";
    return new Date(dateString).toLocaleDateString("es-ES");
  };

  // FunciÃ³n helper para obtener el estado activo correctamente
  const getAfiliadoActivo = (afiliado: any) => {
    // Intenta diferentes estructuras posibles
    return afiliado?.activo ?? afiliado?.afiliado?.activo ?? true; // Por defecto activo si no se especifica
  };

  // Conteo correcto de afiliados activos
  const afiliadosActivos = afiliados.filter(afiliado => getAfiliadoActivo(afiliado)).length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="w-auto mx-auto px-4 py-8">
        {/* Header Section */}
        <div className="bg-white rounded-xl shadow-lg border border-slate-200 p-8 mb-8">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div className="space-y-2">
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">
                GestiÃ³n de Afiliados
              </h1>
              <p className="text-slate-600 text-lg">
                Administra y gestiona todos los afiliados del sindicato
              </p>
              <div className="flex items-center gap-4 text-sm text-slate-500">
                <span className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  Total: {afiliados.length} afiliados
                </span>
                <span className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  Activos: {afiliadosActivos}
                </span>
                <span className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                  Inactivos: {afiliados.length - afiliadosActivos}
                </span>
              </div>
            </div>
            <button
              className="flex items-center gap-2 bg-gradient-to-r from-green-600 to-green-700 text-white px-6 py-3 rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 font-semibold"
              onClick={handleAdd}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
              Agregar Afiliado
            </button>
          </div>
        </div>

        {/* Lista de Afiliados */}
        <div className="bg-white rounded-xl shadow-lg border border-slate-200 overflow-hidden">
          <AfiliadoList
            afiliados={afiliados}
            onEdit={handleEdit}
            onDelete={handleDelete}
            onView={handleView}
            getAfiliadoActivo={getAfiliadoActivo} // Pasamos la funciÃ³n helper
          />
        </div>
      </div>

      {/* Modal para agregar/editar */}
      {showModal && !viewAfiliado && (
        <Modal onClose={() => {
          setShowModal(false);
          setEditAfiliado(null);
        }}>
          <AfiliadoForm
            onClose={() => {
              setShowModal(false);
              setEditAfiliado(null);
            }}
            onSaved={() => {
              fetchAfiliados();
              setShowModal(false);
              setEditAfiliado(null);
            }}
            initialData={editAfiliado}
          />
        </Modal>
      )}

      {/* Modal para ver afiliado */}
      {showModal && viewAfiliado && (
        <Modal onClose={() => {
          setShowModal(false);
          setViewAfiliado(null);
        }}>
          <div className="max-w-4xl max-h-[90vh] overflow-y-auto">
            {/* Header del Modal */}
            <div className="sticky top-0 bg-gradient-to-r from-blue-600 to-blue-700 text-white p-6 rounded-t-lg">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold">Perfil del Afiliado</h2>
                  <p className="text-blue-100 mt-1">
                    {viewAfiliado.persona.nombre} {viewAfiliado.persona.apellido}
                  </p>
                </div>
                <div className="text-right">
                  <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    getAfiliadoActivo(viewAfiliado)
                      ? 'bg-green-500 text-white' 
                      : 'bg-red-500 text-white'
                  }`}>
                    {getAfiliadoActivo(viewAfiliado) ? 'âœ“ Activo' : 'âœ— Inactivo'}
                  </div>
                </div>
              </div>
            </div>

            <div className="p-6 space-y-8">
              {/* InformaciÃ³n Personal */}
              <div className="grid md:grid-cols-2 gap-6">
                <div className="bg-slate-50 rounded-lg p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-bold text-slate-800">InformaciÃ³n Personal</h3>
                  </div>
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">DNI</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.persona.dni}</p>
                      </div>
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Sexo</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.persona.sexo}</p>
                      </div>
                    </div>
                    <div>
                      <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Nombre completo</label>
                      <p className="text-slate-900 font-medium text-lg">
                        {viewAfiliado.persona.nombre} {viewAfiliado.persona.apellido}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Email</label>
                        <p className="text-slate-900 font-medium break-all">{viewAfiliado.persona.email || "N/A"}</p>
                      </div>
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">TelÃ©fono</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.persona.telefono || "N/A"}</p>
                      </div>
                    </div>
                    <div>
                      <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Fecha de nacimiento</label>
                      <p className="text-slate-900 font-medium">{formatDate(viewAfiliado.persona.fechanacimiento)}</p>
                    </div>
                  </div>
                </div>

                {/* InformaciÃ³n Laboral */}
                <div className="bg-slate-50 rounded-lg p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                      <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-bold text-slate-800">InformaciÃ³n Laboral</h3>
                  </div>
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Ãrea</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.afiliado?.area || "N/A"}</p>
                      </div>
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Cargo</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.afiliado?.cargo || "N/A"}</p>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Legajo</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.afiliado?.legajo || "N/A"}</p>
                      </div>
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Tipo contrataciÃ³n</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.afiliado?.tipocontratacion || "N/A"}</p>
                      </div>
                    </div>
                    <div>
                      <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Lugar de trabajo</label>
                      <p className="text-slate-900 font-medium">{viewAfiliado.afiliado?.lugartrabajo || "N/A"}</p>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Fecha afiliaciÃ³n</label>
                        <p className="text-slate-900 font-medium">{formatDate(viewAfiliado.afiliado?.fechaafiliacion)}</p>
                      </div>
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Municipio</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.afiliado?.fechamunicipio || "N/A"}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* InformaciÃ³n de Hijos */}
              <div className="bg-slate-50 rounded-lg p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-bold text-slate-800">
                    Hijos ({viewAfiliado.hijos?.length || 0})
                  </h3>
                </div>
                {!viewAfiliado.hijos || viewAfiliado.hijos.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="w-16 h-16 bg-slate-200 rounded-full mx-auto mb-4 flex items-center justify-center">
                      <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    </div>
                    <p className="text-slate-500 text-lg">No tiene hijos registrados</p>
                  </div>
                ) : (
                  <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    {viewAfiliado.hijos.map((hijo: any, index: number) => (
                      <div key={hijo.idhijo || index} className="bg-white rounded-lg p-4 border border-slate-200">
                        <div className="flex items-center gap-3 mb-3">
                          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${
                            hijo.sexo === 'M' ? 'bg-blue-500' : 'bg-pink-500'
                          }`}>
                            {hijo.nombre?.charAt(0) || '?'}
                          </div>
                          <div>
                            <p className="font-semibold text-slate-900">{hijo.nombre || "Sin nombre"}</p>
                            <p className="text-sm text-slate-500">{hijo.sexo === 'M' ? 'Masculino' : 'Femenino'}</p>
                          </div>
                        </div>
                        <div>
                          <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Fecha nacimiento</label>
                          <p className="text-slate-900 font-medium">{formatDate(hijo.fechanacimiento)}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* InformaciÃ³n de Usuario */}
              <div className="bg-slate-50 rounded-lg p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center">
                    <svg className="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-bold text-slate-800">Acceso al Sistema</h3>
                </div>
                {viewAfiliado.usuario ? (
                  <div className="space-y-3">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Usuario</label>
                        <p className="text-slate-900 font-medium">{viewAfiliado.usuario.username}</p>
                      </div>
                      <div>
                        <label className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Roles</label>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {viewAfiliado.usuario.roles?.split(',').map((role: string, index: number) => (
                            <span key={index} className="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded">
                              {role.trim()}
                            </span>
                          )) || <span className="text-slate-500">Sin roles</span>}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="w-16 h-16 bg-slate-200 rounded-full mx-auto mb-4 flex items-center justify-center">
                      <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                    </div>
                    <p className="text-slate-500 text-lg">No tiene usuario asignado</p>
                    <p className="text-slate-400 text-sm mt-1">Este afiliado no puede acceder al sistema</p>
                  </div>
                )}
              </div>
            </div>

            {/* Footer del Modal */}
            <div className="sticky bottom-0 bg-white border-t border-slate-200 p-4 rounded-b-lg">
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => {
                    setViewAfiliado(null);
                    setShowModal(false);
                  }}
                  className="px-6 py-2 bg-slate-200 text-slate-800 rounded-lg hover:bg-slate-300 transition-colors font-medium"
                >
                  Cerrar
                </button>
                <button
                  onClick={() => {
                    // Redirigir a ediciÃ³n desde el modal de vista
                    localStorage.setItem('editingAfiliado', JSON.stringify(viewAfiliado));
                    window.location.href = `/afiliados/editar/${viewAfiliado.idafiliado || viewAfiliado.afiliado?.idafiliado}`;
                  }}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                >
                  Editar
                </button>
              </div>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
}
// src/app/api/afiliados/[id]/route.ts
import { pool } from "@/lib/db";
import { NextResponse } from "next/server";

export async function DELETE(
  req: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;

    // Actualizamos el estado a inactivo (activo = false)
    const result = await pool.query(
      `UPDATE afiliados 
       SET activo = false 
       WHERE idafiliado = $1 
       RETURNING *`,
      [id]
    );

    if (result.rowCount === 0) {
      return NextResponse.json(
        { error: "Afiliado no encontrado" },
        { status: 404 }
      );
    }

    return NextResponse.json({
      message: "Afiliado marcado como inactivo",
      afiliado: result.rows[0],
    });
  } catch (err) {
    console.error("Error eliminando (soft delete) afiliado:", err);
    return NextResponse.json(
      { error: "Error eliminando afiliado" },
      { status: 500 }
    );
  }
}
// En tu archivo route.ts - CorrecciÃ³n para el GET individual

export async function GET(
  req: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;

    // Traer afiliado + persona - AGREGAR activo al SELECT
    const afiliadoRes = await pool.query(
      `SELECT a.*, 
              p.dni, p.nombre, p.apellido, p.fechanacimiento, p.telefono, p.email, p.sexo
       FROM afiliados a
       JOIN personas p ON a.dni = p.dni
       WHERE a.idafiliado = $1`,
      [id]
    );

    if (afiliadoRes.rowCount === 0) {
      return NextResponse.json({ error: "Afiliado no encontrado" }, { status: 404 });
    }

    const afiliado = afiliadoRes.rows[0];

    // Traer hijos
    const hijosRes = await pool.query(
      `SELECT idhijo, nombre, sexo, fechanacimiento
       FROM hijos
       WHERE dni = $1`,
      [afiliado.dni]
    );

    // Traer usuario
    const userRes = await pool.query(
      `SELECT id, username, roles
       FROM users
       WHERE idafiliado = $1`,
      [id]
    );

    // Estructura consistente con la lista
    return NextResponse.json({
      persona: {
        dni: afiliado.dni,
        nombre: afiliado.nombre,
        apellido: afiliado.apellido,
        fechanacimiento: afiliado.fechanacimiento,
        telefono: afiliado.telefono,
        email: afiliado.email,
        sexo: afiliado.sexo,
      },
      afiliado: {
        idafiliado: afiliado.idafiliado,
        area: afiliado.area,
        cargo: afiliado.cargo,
        tipocontratacion: afiliado.tipocontratacion,
        legajo: afiliado.legajo,
        categoria: afiliado.categoria,
        fechaafiliacion: afiliado.fechaafiliacion,
        fechamunicipio: afiliado.fechamunicipio,
        lugartrabajo: afiliado.lugartrabajo,
        activo: afiliado.activo ?? true, // Asegurar que siempre tenga un valor
      },
      hijos: hijosRes.rows,
      usuario: userRes.rows[0] ?? null,
      activo: afiliado.activo ?? true, // TambiÃ©n a nivel raÃ­z para compatibilidad
    });
  } catch (err) {
    console.error("Error obteniendo detalle de afiliado:", err);
    return NextResponse.json({ error: "Error obteniendo afiliado" }, { status: 500 });
  }
}

export async function PUT(
  req: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = await params;
    const data = await req.json();
    const { persona, afiliado, hijos } = data;

    // Validar datos antes de proceder
    if (isNaN(Number(afiliado.legajo))) {
      return NextResponse.json(
        { error: "El legajo debe ser un nÃºmero vÃ¡lido" },
        { status: 400 }
      );
    }

    // Iniciar una transacciÃ³n
    await pool.query('BEGIN');

    try {
      // 1. Actualizar persona
      await pool.query(
        `UPDATE personas 
         SET nombre = $1, apellido = $2, fechanacimiento = $3, 
             telefono = $4, email = $5, sexo = $6
         WHERE dni = $7`,
        [
          persona.nombre,
          persona.apellido,
          persona.fechanacimiento,
          persona.telefono,
          persona.email,
          persona.sexo,
          persona.dni
        ]
      );

      // Convertir a nÃºmero (ya validado)
      const legajo = Number(afiliado.legajo);
      const categoria = !isNaN(Number(afiliado.categoria)) ? Number(afiliado.categoria) : 0;

      // 2. Actualizar afiliado
      await pool.query(
        `UPDATE afiliados 
         SET area = $1, cargo = $2, tipocontratacion = $3, 
             legajo = $4, categoria = $5, fechaafiliacion = $6, 
             fechamunicipio = $7, lugartrabajo = $8
         WHERE idafiliado = $9`,
        [
          afiliado.area,
          afiliado.cargo,
          afiliado.tipocontratacion,
          legajo,
          categoria,
          afiliado.fechaafiliacion,
          afiliado.fechamunicipio || null,
          afiliado.lugartrabajo || null,
          id
        ]
      );

      // 3. Eliminar hijos existentes y agregar los nuevos
      await pool.query('DELETE FROM hijos WHERE dni = $1', [persona.dni]);
      
      for (const h of hijos) {
        await pool.query(
          `INSERT INTO hijos (dni, nombre, sexo, fechanacimiento) 
           VALUES ($1, $2, $3, $4)`,
          [persona.dni, h.nombre, h.sexo, h.fechanacimiento]
        );
      }

      // Confirmar la transacciÃ³n
      await pool.query('COMMIT');

      return NextResponse.json({
        message: "Afiliado actualizado correctamente",
        afiliado: { ...afiliado, dni: persona.dni }
      });

    } catch (error) {
      // Revertir la transacciÃ³n en caso de error
      await pool.query('ROLLBACK');
      throw error;
    }
  } catch (err) {
    console.error("Error actualizando afiliado:", err);
    return NextResponse.json(
      { error: "Error actualizando afiliado" },
      { status: 500 }
    );
  }
}
import { pool } from "@/lib/db";
import bcrypt from "bcrypt";
import { NextResponse } from "next/server";
import crypto from "crypto";


export async function GET() {
  try {
    const result = await pool.query(
      `SELECT 
  a.idafiliado,
  a.area,
  a.cargo,
  a.tipocontratacion,
  a.legajo,
  a.categoria,
  a.fechaafiliacion,
  a.fechamunicipio,
  a.lugartrabajo,
  a.activo,  
  json_build_object(
    'dni', p.dni,
    'nombre', p.nombre,
    'apellido', p.apellido,
    'fechanacimiento', p.fechanacimiento,
    'telefono', p.telefono,
    'email', p.email,
    'sexo', p.sexo
  ) as persona
FROM afiliados a
JOIN personas p ON a.dni = p.dni
ORDER BY p.apellido ASC
`
    );

    return NextResponse.json(result.rows);
  } catch (err) {
    console.error("Error obteniendo afiliados:", err);
    return NextResponse.json(
      { error: "Error obteniendo afiliados" },
      { status: 500 }
    );
  }
}
export async function POST(req: Request) {
  try {
    const data = await req.json();

    const {
      persona,
      afiliado,
      hijos,
    }: {
      persona: {
        dni: number;
        nombre: string;
        apellido: string;
        fechanacimiento: string;
        telefono: number;
        email: string;
        sexo: string;
      };
      afiliado: {
        idafiliado: number;
        area: string;
        cargo: string;
        tipocontratacion: string;
        legajo: number;
        categoria?: number;
        fechaafiliacion: string;
        fechamunicipio?: string;
        lugartrabajo?: string;

      };
      hijos: {
        nombre: string;
        sexo: string;
        fechanacimiento: string;
      }[];
    } = data;

    // 1. Insert persona
    await pool.query(
      `INSERT INTO personas (dni, nombre, apellido, fechanacimiento, telefono, email, sexo) 
       VALUES ($1,$2,$3,$4,$5,$6,$7)
       ON CONFLICT (dni) DO NOTHING`,
      [
        persona.dni,
        persona.nombre,
        persona.apellido,
        persona.fechanacimiento,
        persona.telefono,
        persona.email,
        persona.sexo,
      ]
    );

    // 2. Insert afiliado
    await pool.query(
      `INSERT INTO afiliados 
        (idafiliado, dni, area, cargo, tipocontratacion, legajo, categoria, fechaafiliacion, fechamunicipio, lugartrabajo)
       VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)`,
      [
        afiliado.idafiliado,
        persona.dni,
        afiliado.area,
        afiliado.cargo,
        afiliado.tipocontratacion,
        afiliado.legajo,
        afiliado.categoria ?? null,
        afiliado.fechaafiliacion,
        afiliado.fechamunicipio ?? null,
        afiliado.lugartrabajo ?? null,
        
      ]
    );

    // 3. Insert hijos
    for (const h of hijos) {
      await pool.query(
        `INSERT INTO hijos (dni, nombre, sexo, fechanacimiento) 
         VALUES ($1,$2,$3,$4)`,
        [persona.dni, h.nombre, h.sexo, h.fechanacimiento]
      );
    }

    // 4. Crear usuario
    const username = `${persona.nombre.toLowerCase()}.${persona.apellido.toLowerCase()}`;
    const plainPassword = crypto.randomBytes(9).toString("base64").slice(0, 12); // contraseÃ±a aleatoria 12 chars
    const password_hash = await bcrypt.hash(plainPassword, 10);

    await pool.query(
      `INSERT INTO users (username, password_hash, roles, idafiliado)
       VALUES ($1,$2,'afiliado',$3)`,
      [username, password_hash, afiliado.idafiliado]
    );

    return NextResponse.json({
      message: "Afiliado creado correctamente",
      username,
      password: plainPassword, // âš ï¸ mostrar solo una vez, no guardarlo en texto plano
    });
  } catch (err) {
    console.error("Error creando afiliado:", err);
    return NextResponse.json({ error: "Error creando afiliado" }, { status: 500 });
  }
}




import { pool } from "@/lib/db";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

interface User {
  id: number;
  username: string;
  password_hash: string;
  roles: string;
}

export async function POST(req: Request) {
  try {
    const { username, password } = await req.json();

    const result = await pool.query<User>(
      "SELECT * FROM users WHERE username=$1",
      [username]
    );

    if (result.rows.length === 0) {
      return new Response(JSON.stringify({ error: "Usuario no encontrado" }), { status: 401 });
    }

    const user = result.rows[0];

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      return new Response(JSON.stringify({ error: "ContraseÃ±a incorrecta" }), { status: 401 });
    }

    const token = jwt.sign(
      { id: user.id, roles: user.roles },
      process.env.JWT_SECRET as string,
      { expiresIn: "1h" }
    );

    return new Response(JSON.stringify({ message: "Login exitoso" }), {
      status: 200,
      headers: {
        "Set-Cookie": `token=${token}; HttpOnly; Path=/; Max-Age=3600; Secure; SameSite=Strict`,
      },
    });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: "Error en login" }), { status: 500 });
  }
}
"use client";
import { useState, FormEvent } from "react";

export default function LoginPage() {
  const [username, setUsername] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [error, setError] = useState<string>("");

  const handleLogin = async (e: FormEvent) => {
    e.preventDefault();
    setError("");

    const res = await fetch("/api/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    if (res.ok) {
      window.location.href = "/";
    } else {
      const data = await res.json();
      setError(data.error);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen">
      <form onSubmit={handleLogin} className="p-6 bg-white shadow rounded-xl">
        <h2 className="text-xl font-bold mb-4">Login</h2>
        <input
          className="border p-2 w-full mb-2"
          type="text"
          placeholder="Usuario"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          className="border p-2 w-full mb-2"
          type="password"
          placeholder="ContraseÃ±a"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        {error && <p className="text-red-500 text-sm">{error}</p>}
        <button
          type="submit"
          className="bg-blue-500 text-white px-4 py-2 rounded w-full mt-2"
        >
          Entrar
        </button>
      </form>
    </div>
  );
}
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
import Image from "next/image";

export default function Home() {
  return (
    <div className="font-sans grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20">
      <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="font-mono list-inside list-decimal text-sm/6 text-center sm:text-left">
          <li className="mb-2 tracking-[-.01em]">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] font-mono font-semibold px-1 py-0.5 rounded">
              src/app/page.tsx
            </code>
            .
          </li>
          <li className="tracking-[-.01em]">
            Save and see your changes instantly.
          </li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 w-full sm:w-auto md:w-[158px]"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org â†’
        </a>
      </footer>
    </div>
  );
}
